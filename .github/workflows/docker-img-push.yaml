name: Build and Push Docker Image
permissions:
  contents: write
  packages: write
  actions: write
on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dockerfile:
          - Dockerfile.ubuntu
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435
      - name: Log in to GitHub Docker registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Assign environment variables used in subsequent steps
      - name: Env IMG_REPO_NAME Assignment
        env:
          DOCKERFILE_NAME: ${{ matrix.dockerfile }}
        run: echo "IMG_REPO_NAME=$(echo $DOCKERFILE_NAME | sed 's/^Dockerfile\.\(.*\)$/\1/' | tr '[:upper:]' '[:lower:]')-wsl" >> "${GITHUB_ENV}"
      # TAG_NAME defaults to 'latest' if not a release or manual deployment
      - name: Assign TAG_NAME
        env:
          RELEASE_TAG: ${{ github.event.release.tag_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
        run: |
          echo "TAG_NAME=latest" >> "${GITHUB_ENV}"
          if [ "$RELEASE_TAG" != "" ]; then
            echo "TAG_NAME=$RELEASE_TAG" >> "${GITHUB_ENV}"
          fi;
          if [ "$INPUT_VERSION" != "" ]; then
            echo "TAG_NAME=$INPUT_VERSION" >> "${GITHUB_ENV}"
          fi;
      - name: Set variable based on actor
        env:
          ACTOR: ${{ github.actor }}
        run: |
          if [[ "$ACTOR" == *"bot"* ]]; then
            echo "GITHUB_ACTOR=bot" >> $GITHUB_ENV
          else
            echo "GITHUB_ACTOR=$ACTOR" >> $GITHUB_ENV
          fi
      - name: Build Docker image only
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: Dockerfiles
          file: Dockerfiles/${{ matrix.dockerfile }}
          push: false
          load: true
          tags: ghcr.io/${{ env.GITHUB_ACTOR }}/${{ env.IMG_REPO_NAME }}:${{ env.TAG_NAME }}
      - name: Build and push Docker image
        if: github.event_name == 'push'
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83
        with:
          context: Dockerfiles
          file: Dockerfiles/${{ matrix.dockerfile }}
          push: true
          load: true
          tags: ghcr.io/${{ env.GITHUB_ACTOR }}/${{ env.IMG_REPO_NAME }}:${{ env.TAG_NAME }}
      - name: Save Docker image to tarball
        run: |
          docker run -t --name wsl_export ghcr.io/${{ env.GITHUB_ACTOR }}/${{ env.IMG_REPO_NAME }}:${{ env.TAG_NAME }} ls
          docker export wsl_export > ${{ env.IMG_REPO_NAME }}.tar
      - name: Check if release exists
        id: check-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          TAG_NAME: ${{ env.TAG_NAME }}
        run: |
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/releases/tags/$TAG_NAME")
          if echo "$response" | grep -q '"tag_name":'; then
            release_id=$(echo "$response" | jq -r '.id')
            echo "RELEASE_EXISTS=true" >> "$GITHUB_ENV"
            echo "RELEASE_ID=$release_id" >> "$GITHUB_ENV"
          else
            echo "RELEASE_EXISTS=false" >> "$GITHUB_ENV"
          fi
      - name: Delete existing release
        if: env.RELEASE_EXISTS == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          RELEASE_ID: ${{ env.RELEASE_ID }}
        run: |
          echo "Deleting existing release with ID $RELEASE_ID"
          curl -s -X DELETE -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$REPO/releases/$RELEASE_ID"
      - name: Create GitHub release
        if: github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: Release ${{ env.IMG_REPO_NAME }}
          draft: false
          prerelease: false
        id: create_release
      - name: Upload tar as release asset
        if: github.event_name == 'push'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.IMG_REPO_NAME }}.tar
          asset_name: ${{ env.IMG_REPO_NAME }}.tar
          asset_content_type: application/x-tar
